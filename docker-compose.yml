services:
    # PWA Frontend
    rncp-pwa-front:
        build:
            context: .
            dockerfile: ./apps/rncp_PWA_front/Dockerfile
        ports:
            - '3000:80'
        environment:
            - NODE_ENV=production
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # API Gateway (Main API)
    rncp-api-gateway:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile
        ports:
            - '3001:3000'
        environment:
            - NODE_ENV=production
            - PORT=3000
            - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
            - JWT_EXPIRES_IN=15m
            - JWT_REFRESH_EXPIRES_IN=7d
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=rncp_db
            - DB_USER=rncp_user
            - DB_PASSWORD=rncp_password
            - REDIS_URL=redis://redis:6379
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # User Microservice
    rncp-user-service:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile
        ports:
            - '3002:3001'
        environment:
            - NODE_ENV=production
            - PORT=3001
            - SERVICE_NAME=user-service
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=rncp_db
            - DB_USER=rncp_user
            - DB_PASSWORD=rncp_password
            - REDIS_URL=redis://redis:6379
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3001/users/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # Authentication Microservice
    rncp-auth-service:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile.auth-service
        ports:
            - '3003:3001'
        environment:
            - NODE_ENV=production
            - PORT=3001
            - SERVICE_NAME=auth-service
            - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
            - JWT_EXPIRES_IN=15m
            - JWT_REFRESH_EXPIRES_IN=7d
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=rncp_db
            - DB_USER=rncp_user
            - DB_PASSWORD=rncp_password
            - REDIS_URL=redis://redis:6379
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3001/auth/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        environment:
            POSTGRES_DB: rncp_db
            POSTGRES_USER: rncp_user
            POSTGRES_PASSWORD: rncp_password
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U rncp_user -d rncp_db']
            interval: 30s
            timeout: 10s
            retries: 5

    # Redis (Message Broker for Microservices)
    redis:
        image: redis:7-alpine
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3

# Volumes
volumes:
    postgres_data:
    redis_data:
