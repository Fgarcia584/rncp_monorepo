services:
    # PWA Frontend
    rncp-pwa-front:
        build:
            context: .
            dockerfile: ./apps/rncp_PWA_front/Dockerfile
        ports:
            - '${FRONTEND_PORT}:${FRONTEND_INTERNAL_PORT}'
        env_file: .env
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # API Gateway (Main API)
    rncp-api-gateway:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile
        ports:
            - '${API_GATEWAY_PORT}:${API_GATEWAY_INTERNAL_PORT}'
        env_file: .env
        environment:
            - PORT=${API_GATEWAY_INTERNAL_PORT}
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--quiet',
                    '--tries=1',
                    '--spider',
                    'http://localhost:${API_GATEWAY_INTERNAL_PORT}/health',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # User Microservice
    rncp-user-service:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile
        ports:
            - '${USER_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}'
        env_file: .env
        environment:
            - PORT=${SERVICE_INTERNAL_PORT}
            - SERVICE_NAME=user-service
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--quiet',
                    '--tries=1',
                    '--spider',
                    'http://localhost:${SERVICE_INTERNAL_PORT}/users/health',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # Authentication Microservice
    rncp-auth-service:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile.auth-service
        ports:
            - '${AUTH_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}'
        env_file: .env
        environment:
            - PORT=${SERVICE_INTERNAL_PORT}
            - SERVICE_NAME=auth-service
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--quiet',
                    '--tries=1',
                    '--spider',
                    'http://localhost:${SERVICE_INTERNAL_PORT}/auth/health',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    rncp-order-service:
        build:
            context: .
            dockerfile: ./apps/rncp_api/Dockerfile.order-service
        ports:
            - '${ORDER_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}'
        env_file: .env
        environment:
            - PORT=${SERVICE_INTERNAL_PORT}
            - SERVICE_NAME=order-service
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--quiet',
                    '--tries=1',
                    '--spider',
                    'http://localhost:${SERVICE_INTERNAL_PORT}/orders/health',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            - redis
            - postgres

    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        env_file: .env
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
            interval: 30s
            timeout: 10s
            retries: 5

    # Redis (Message Broker for Microservices)
    redis:
        image: redis:7-alpine
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis_data:/data
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3

# Volumes
volumes:
    postgres_data:
    redis_data:
