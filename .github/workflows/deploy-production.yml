name: Deploy to Production Environment

on:
    workflow_dispatch:
        inputs:
            image_tag:
                description: 'Image tag to deploy'
                required: true
                default: 'latest-prod'

env:
    AZURE_RESOURCE_GROUP: rg-rncp-prod
    AZURE_LOCATION: westeurope
    CONTAINER_GROUP_NAME: aci-rncp-prod
    REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
    manual-approval:
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Manual Approval Required
              run: |
                  echo "üöÄ Production deployment requires manual approval"
                  echo "Image tag: ${{ inputs.image_tag }}"

    deploy-infrastructure:
        needs: manual-approval
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

            - name: Create Resource Group
              run: |
                  az group create \
                    --name ${{ env.AZURE_RESOURCE_GROUP }} \
                    --location ${{ env.AZURE_LOCATION }}

            - name: Deploy PostgreSQL (Production)
              run: |
                  az postgres flexible-server create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name psql-rncp-prod \
                    --location ${{ env.AZURE_LOCATION }} \
                    --admin-user ${{ secrets.POSTGRES_USER_PROD }} \
                    --admin-password ${{ secrets.POSTGRES_PASSWORD_PROD }} \
                    --sku-name Standard_D2s_v3 \
                    --tier GeneralPurpose \
                    --storage-size 128 \
                    --version 15 \
                    --public-access 0.0.0.0 \
                    --backup-retention 30 \
                    --geo-redundant-backup Enabled \
                    --yes

            - name: Create PostgreSQL Database
              run: |
                  az postgres flexible-server db create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --server-name psql-rncp-prod \
                    --database-name ${{ secrets.POSTGRES_DB_PROD }}

            - name: Deploy Redis Cache (Production)
              run: |
                  az redis create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name redis-rncp-prod \
                    --location ${{ env.AZURE_LOCATION }} \
                    --sku Standard \
                    --vm-size c1 \
                    --redis-configuration '{"maxmemory-policy":"allkeys-lru"}'

    backup-current-deployment:
        needs: deploy-infrastructure
        runs-on: ubuntu-latest
        steps:
            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

            - name: Get current deployment info
              id: current
              run: |
                  if az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_GROUP_NAME }} > /dev/null 2>&1; then
                    CURRENT_IMAGE=$(az container show \
                      --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                      --name ${{ env.CONTAINER_GROUP_NAME }} \
                      --query 'containers[0].image' -o tsv)
                    echo "image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
                    echo "exists=true" >> $GITHUB_OUTPUT
                  else
                    echo "exists=false" >> $GITHUB_OUTPUT
                  fi

            - name: Store rollback info
              run: |
                  echo "ROLLBACK_IMAGE=${{ steps.current.outputs.image }}" >> $GITHUB_ENV
                  echo "Previous deployment: ${{ steps.current.outputs.image }}"

    deploy-containers:
        needs: [deploy-infrastructure, backup-current-deployment]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

            - name: Get Redis connection string
              id: redis
              run: |
                  REDIS_KEY=$(az redis list-keys \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name redis-rncp-prod \
                    --query primaryKey -o tsv)
                  echo "connection_string=redis-rncp-prod.redis.cache.windows.net:6380,password=$REDIS_KEY,ssl=True" >> $GITHUB_OUTPUT

            - name: Deploy Frontend (Blue-Green)
              run: |
                  # Deploy new version
                  az container create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name ${{ env.CONTAINER_GROUP_NAME }}-new \
                    --location ${{ env.AZURE_LOCATION }} \
                    --image ${{ env.REGISTRY }}/rncp-frontend:${{ inputs.image_tag }} \
                    --registry-login-server ${{ env.REGISTRY }} \
                    --registry-username ${{ secrets.ACR_USERNAME }} \
                    --registry-password ${{ secrets.ACR_PASSWORD }} \
                    --dns-name-label rncp-prod-frontend-new \
                    --ports 80 \
                    --cpu 2 \
                    --memory 3 \
                    --environment-variables \
                      NODE_ENV=production \
                      API_URL=https://rncp-prod-api.westeurope.azurecontainer.io

            - name: Deploy API Gateway (Blue-Green)
              run: |
                  az container create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name aci-rncp-prod-api-new \
                    --location ${{ env.AZURE_LOCATION }} \
                    --image ${{ env.REGISTRY }}/rncp-api-gateway:${{ inputs.image_tag }} \
                    --registry-login-server ${{ env.REGISTRY }} \
                    --registry-username ${{ secrets.ACR_USERNAME }} \
                    --registry-password ${{ secrets.ACR_PASSWORD }} \
                    --dns-name-label rncp-prod-api-new \
                    --ports 3001 \
                    --cpu 2 \
                    --memory 4 \
                    --environment-variables \
                      NODE_ENV=production \
                      PORT=3001 \
                      DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
                      REDIS_URL=${{ steps.redis.outputs.connection_string }} \
                      JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}

            - name: Deploy User Service
              run: |
                  az container create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name aci-rncp-prod-user-new \
                    --location ${{ env.AZURE_LOCATION }} \
                    --image ${{ env.REGISTRY }}/rncp-user-service:${{ inputs.image_tag }} \
                    --registry-login-server ${{ env.REGISTRY }} \
                    --registry-username ${{ secrets.ACR_USERNAME }} \
                    --registry-password ${{ secrets.ACR_PASSWORD }} \
                    --cpu 2 \
                    --memory 4 \
                    --environment-variables \
                      NODE_ENV=production \
                      PORT=3002 \
                      SERVICE_NAME=user-service \
                      DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
                      REDIS_URL=${{ steps.redis.outputs.connection_string }}

            - name: Deploy Auth Service
              run: |
                  az container create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name aci-rncp-prod-auth-new \
                    --location ${{ env.AZURE_LOCATION }} \
                    --image ${{ env.REGISTRY }}/rncp-auth-service:${{ inputs.image_tag }} \
                    --registry-login-server ${{ env.REGISTRY }} \
                    --registry-username ${{ secrets.ACR_USERNAME }} \
                    --registry-password ${{ secrets.ACR_PASSWORD }} \
                    --cpu 2 \
                    --memory 4 \
                    --environment-variables \
                      NODE_ENV=production \
                      PORT=3003 \
                      SERVICE_NAME=auth-service \
                      DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
                      REDIS_URL=${{ steps.redis.outputs.connection_string }} \
                      JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}

    health-checks:
        needs: deploy-containers
        runs-on: ubuntu-latest
        steps:
            - name: Wait for services to start
              run: sleep 120

            - name: Check Frontend Health
              run: |
                  curl -f https://rncp-prod-frontend-new.westeurope.azurecontainer.io/health || exit 1

            - name: Check API Gateway Health
              run: |
                  curl -f https://rncp-prod-api-new.westeurope.azurecontainer.io:3001/health || exit 1

            - name: Run Production Smoke Tests
              run: |
                  # Tests de base pour valider le d√©ploiement
                  echo "Running production smoke tests..."
                  # Ajouter ici vos tests de validation production

    switch-traffic:
        needs: health-checks
        runs-on: ubuntu-latest
        steps:
            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

            - name: Switch traffic to new deployment
              run: |
                  # Supprimer l'ancien d√©ploiement s'il existe
                  if az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_GROUP_NAME }} > /dev/null 2>&1; then
                    az container delete \
                      --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                      --name ${{ env.CONTAINER_GROUP_NAME }} \
                      --yes
                  fi

                  # Renommer le nouveau d√©ploiement
                  az container create \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --name ${{ env.CONTAINER_GROUP_NAME }} \
                    --location ${{ env.AZURE_LOCATION }} \
                    --image ${{ env.REGISTRY }}/rncp-frontend:${{ inputs.image_tag }} \
                    --registry-login-server ${{ env.REGISTRY }} \
                    --registry-username ${{ secrets.ACR_USERNAME }} \
                    --registry-password ${{ secrets.ACR_PASSWORD }} \
                    --dns-name-label rncp-prod-frontend \
                    --ports 80 \
                    --cpu 2 \
                    --memory 3 \
                    --environment-variables \
                      NODE_ENV=production \
                      API_URL=https://rncp-prod-api.westeurope.azurecontainer.io

            - name: Cleanup temporary containers
              run: |
                  az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_GROUP_NAME }}-new --yes || true
                  az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name aci-rncp-prod-api-new --yes || true
                  az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name aci-rncp-prod-user-new --yes || true
                  az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name aci-rncp-prod-auth-new --yes || true

    post-deployment:
        needs: switch-traffic
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Deployment Success Notification
              if: needs.switch-traffic.result == 'success'
              run: |
                  echo "üéâ Production deployment successful!"
                  echo "Frontend: https://rncp-prod-frontend.westeurope.azurecontainer.io"
                  echo "API: https://rncp-prod-api.westeurope.azurecontainer.io:3001"

            - name: Deployment Failure - Rollback
              if: needs.switch-traffic.result == 'failure'
              run: |
                  echo "‚ùå Production deployment failed - initiating rollback"
                  # Le rollback pourrait √™tre impl√©ment√© ici
                  exit 1
